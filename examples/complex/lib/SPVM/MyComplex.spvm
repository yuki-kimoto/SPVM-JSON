class MyComplex {
  use Complex_2f;
  use Complex_2d;
  use Math (complexf);
  use Math (complex);
  use Math (caddf, csubf, cmulf, cscamulf, cdivf);
  use Math (cadd, csub, cmul, cscamul, cdiv);
  
  static method new_float_complex : void () {
    
    my $z : Complex_2f;
    $z->{re} = 1.5f;
    $z->{im} = 1.7f;
  }

  static method new_float_complex_func : void () {
    my $z = complexf(1.5f, 1.7f);
  }
  
  static method new_double_complex : void () {
    my $z : Complex_2d;
    $z->{re} = 1.5;
    $z->{im} = 1.7;
  }

  static method new_double_complex_func : void () {
    my $z = complex(1.5, 1.7);
  }

  static method complex_float_operations : void () {

    my $z1 = complexf(1.5f, 1.7f);
    my $z2 = complexf(2.5f, 2.7f);

    # Addition
    my $z_add = caddf($z1, $z2);

    # Subtract
    my $z_method = csubf($z1, $z2);

    # Multiply
    my $z_mul = cmulf($z1, $z2);

    # Scalar Multiply
    my $z_scamul = cscamulf(3, $z2);

    # Division
    my $z_div = cdivf($z1, $z2);
  }

  static method complex_double_operations : void () {

    my $z1 = complex(1.5, 1.7);
    my $z2 = complex(2.5, 2.7);

    # Addition
    my $z_add = cadd($z1, $z2);

    # Subtract
    my $z_method = csub($z1, $z2);

    # Multiply
    my $z_mul = cmul($z1, $z2);

    # Scalar Multiply
    my $z_scamul = cscamul(3, $z2);

    # Division
    my $z_div = cdiv($z1, $z2);
  }

  static method complex_float_array : void () {
    my $zs = new Complex_2f[100];

    for (my $i = 0; $i < @$zs; $i++) {
      my $z = $zs->[$i];
      $z->{re} = 1.5f;
      $z->{im} = 1.7f;
    }
  }
  
  static method complex_double_array : void () {
    my $zs = new Complex_2d[100];

    for (my $i = 0; $i < @$zs; $i++) {
      my $z = $zs->[$i];
      $z->{re} = 1.5;
      $z->{im} = 1.7;
    }
  }

  static method complex_call_from_perl : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d) {
    
    my $z_ret = cadd($z1, $z2);
    
    return $z_ret;
  }
}
