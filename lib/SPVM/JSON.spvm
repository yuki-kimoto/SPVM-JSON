class JSON : precompile {
  use Hash;
  use List;
  use StringBuffer;
  use Fn;
  
  has canonical : rw byte;

  private static method _decode_error : void ($die_message : string, $json : string, $start : int) {
    my $end = length $json;
    my $max_dump_length = 10;
    if ($max_dump_length > $end - $start) {
      $max_dump_length = $end - $start;
    }
    my $hint = "";
    if ($max_dump_length > 0) {
      $hint = "near '" . Fn->substr($json, $start, $end - $start) . "'";
    }
    else {
      $hint = "end of string";
    }
    die $die_message . " ... $hint";
  }

  private method _skip_spaces : void ($json : string, $iter : int*) {
    my $end = length $json;
    for (; 1 ; ++$$iter) {
      if ($$iter == $end) {
        return;
      }
      unless ($json->[$$iter] == ' ' || $json->[$$iter] == '\n' || $json->[$$iter] == '\t' || $json->[$$iter] == '\r') {
        last;
      }
    }
  }

  private static method _expect_char : void ($json : string, $iter : int*, $expected : byte) {
    my $end = length $json;
    unless ($$iter + 1 <= $end && $json->[$$iter] == $expected) {
      &_decode_error("Expected char: $expected] doesn't exist", $json, $$iter);
    }
    ++$$iter;
  }

  private static method _expect_token : void ($json : string, $iter : int*, $expected : string) {
    my $end = length $json;
    my $length = length $expected;
    unless ($$iter + $length <= $end) {
      &_decode_error("Expected token: $expected doesn't exist", $json, $$iter);
    }
    my $got = Fn->substr($json, $$iter, $length);
    if ($got eq $expected) {
      $$iter += $length;
    }
    else {
      &_decode_error("Expected token: $expected doesn't exist", $json, $$iter);
    }
  }

  private method _decode_string : string ($json : string, $iter : int*) {
    my $end = length $json;
    my $buffer = StringBuffer->new;

    &_expect_char($json, $iter, '"');

    my $special_char_expected = 0;
    while (1) {
      if ($$iter >= $end || (!$special_char_expected && $json->[$$iter] == '"')) {
        last;
      }
      my $char = $json->[$$iter];
      if ($special_char_expected) {
        switch ((int)$char) {
          case '"':
          case '\\':
          case '/': {
            $buffer->push_char($char);
            break;
          }
          case 'b': {
            $buffer->push_char('\x08');
            break;
          }
          case 'f': {
            $buffer->push_char('\f');
            break;
          }
          case 'n': {
            $buffer->push_char('\n');
            break;
          }
          case 'r': {
            $buffer->push_char('\r');
            break;
          }
          case 't': {
            $buffer->push_char('\t');
            break;
          }
          default: {
            &_decode_error("Undefined special char", $json, $$iter);
          }
        }
        $special_char_expected = 0;
      }
      elsif ($char == '\\') {
        $special_char_expected = 1;
      }
      else {
        if ($char <= 31 || $char == 127) {
          &_decode_error("Control ASCII characters are not allowed in string", $json, $$iter);
        }
        $buffer->push_char($char);
      }
      ++$$iter;
    }
    if ($$iter == $end) {
      &_decode_error("Invalid string. end-quote doesn't exist", $json, $$iter);
    }

    &_expect_char($json, $iter, '\"');

    return (string)$buffer->to_string;
  }

  private enum {
    DECODE_NUM_BEGIN,
    DECODE_NUM_LEADING_DIGIT,
    DECODE_NUM_DOT,
    DECODE_NUM_FRAC,
    DECODE_NUM_EXP,
    DECODE_NUM_EXP_SIGN,
    DECODE_NUM_EXP_DIGIT,
    DECODE_NUM_END,
  }

  private method _decode_num : object ($json : string, $iter : int*) {
    my $json_length = length $json;

    my $iter_decode_begin = $$iter;

    # validate number
    my $state = &DECODE_NUM_BEGIN();

    if ($json->[$$iter] == '-') {
      unless ($$iter + 1 < $json_length && Fn->is_digit($json->[$$iter + 1])) {
        &_decode_error("malformed number (no digit after '-')", $json, $$iter);
      }
      $$iter += 2;
    }
    elsif (!Fn->is_digit($json->[$$iter])) {
      die "[BUG] first character must be digit or '-'";
    }

    $state = &DECODE_NUM_LEADING_DIGIT();

    while ($state != &DECODE_NUM_END()) {
      my $ch = (int) $json->[$$iter];

      switch($ch) {
        case '.': {
          unless ($state == &DECODE_NUM_LEADING_DIGIT()) {
            &_decode_error("malformed number (improper position of '.')", $json, $$iter);
          }
          $state = &DECODE_NUM_DOT();
          break;
        }
        case 'e': {
          switch ($state) {
            case &DECODE_NUM_DOT():
            case &DECODE_NUM_EXP():
            case &DECODE_NUM_EXP_SIGN():
            case &DECODE_NUM_EXP_DIGIT(): {
              &_decode_error("malformed number (improper position of 'e')", $json, $$iter);
              break;
            }
            default: {
              $state = &DECODE_NUM_EXP();
            }
          }
          break;
        }
        default: {
          switch ($state) {
            case &DECODE_NUM_DOT(): {
              unless (Fn->is_digit($ch)) {
                &_decode_error("malformed number (no digit after '.')", $json, $$iter);
              }
              $state = &DECODE_NUM_FRAC();
              break;
            }
            case &DECODE_NUM_EXP(): {
              if ($ch == '+' || $ch == '-') {
                $state = &DECODE_NUM_EXP_SIGN();
              }
              elsif (Fn->is_digit($ch)) {
                $state = &DECODE_NUM_EXP_DIGIT();
              }
              else {
                &_decode_error("malformed number (no digit after 'e')", $json, $$iter);
              }
              break;
            }
            case &DECODE_NUM_EXP_SIGN(): {
              unless (Fn->is_digit($ch)) {
                &_decode_error("malformed number (no digit after exponential sign)", $json, $$iter);
              }
              $state = &DECODE_NUM_EXP_DIGIT();
              break;
            }
            default: {
              unless (Fn->is_digit($ch)) {
                $state = &DECODE_NUM_END();
              }
              break;
            }
          }
          break;
        }
      }

      if ($state == &DECODE_NUM_END()) {
        last;
      }

      ++$$iter;

      if ($json_length <= $$iter) {
        unless ($state == &DECODE_NUM_LEADING_DIGIT() ||
                $state == &DECODE_NUM_FRAC() ||
                $state == &DECODE_NUM_EXP_DIGIT()) {
          &_decode_error("malformed number (end of string)", $json, $$iter);
        }
        $state = &DECODE_NUM_END();
      }
    }

    my $iter_decode_end = $$iter;

    # decode number by Fn->to_double
    my $decode_length = $iter_decode_end - $iter_decode_begin;
    my $decode_string = Fn->substr($json, $iter_decode_begin, $decode_length);
    my $result_number = Fn->to_double($decode_string);

    return Double->new($result_number);
  }

  private method _decode_true : Bool ($json : string, $iter : int*) {
    &_expect_token($json, $iter, "true");
    return true;
  }

  private method _decode_false : Bool ($json : string, $iter : int*) {
    &_expect_token($json, $iter, "false");
    return false;
  }

  private method _decode_hash : Hash ($json : string, $iter : int*) {
    my $end = length $json;
    my $hash = Hash->new({});
    my $has_element = 0;

    &_expect_char($json, $iter, '{');

    while (1) {
      $self->_skip_spaces($json, $iter);
      if ($$iter == $end) {
        &_decode_error("Incomplete object in JSON: end of string", $json, $$iter);
      }

      # end of hash
      if ($json->[$$iter] == '}') {
        last;
      }

      # comma
      if ($has_element) {
        &_expect_char($json, $iter, ',');
        $self->_skip_spaces($json, $iter);
      }
      else {
        $has_element = 1;
      }

      # key
      my $key = $self->_decode_string($json, $iter);

      # separator
      $self->_skip_spaces($json, $iter);
      &_expect_char($json, $iter, ':');

      # value
      my $value = $self->_decode_recursive($json, $iter);
      $hash->set($key, $value);
    }

    &_expect_char($json, $iter, '}');

    return $hash;
  }

  private method _decode_list : List ($json : string, $iter : int*) {
    my $end = length $json;
    my $list = List->new([]);
    my $has_element = 0;

    &_expect_char($json, $iter, '[');

    while (1) {
      $self->_skip_spaces($json, $iter);
      if ($$iter == $end) {
        &_decode_error("Incomplete array in JSON: end of string", $json, $$iter);
      }

      # end of list
      if ($json->[$$iter] == ']') {
        last;
      }

      # comma
      if ($has_element) {
        &_expect_char($json, $iter, ',');
      }
      else {
        $has_element = 1;
      }
      $list->push($self->_decode_recursive($json, $iter));
    }

    &_expect_char($json, $iter, ']');

    return $list;
  }

  private method _decode_recursive : object ($json : string, $iter : int*) {
    my $end = length $json;

    $self->_skip_spaces($json, $iter);
    if ($$iter == $end) {
      &_decode_error("Incomplete JSON", $json, $$iter);
    }

    my $c = (int)($json->[$$iter]);
    switch ($c) {
      case '{': {
        # objects
        return $self->_decode_hash($json, $iter);
      }
      case '[': {
        return $self->_decode_list($json, $iter);
      }
      case '"': {
        return $self->_decode_string($json, $iter);
      }
      case '-':
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9': {
        return $self->_decode_num($json, $iter);
      }
      case 't': {
        return $self->_decode_true($json, $iter);
      }
      case 'f': {
        return $self->_decode_false($json, $iter);
      }
      case 'n': {
        &_expect_token($json, $iter, "null");
        return undef;
      }
      default: {
        &_decode_error("Unexpected token.", $json, $$iter);
      }
    }
  }

  private static method _escape_string : string ($string : string) {
    my $length = length $string;
    my $buffer = StringBuffer->new;
    for (my $i = 0; $i < $length; ++$i) {
      my $char = $string->[$i];
      my $special : byte = -1;
      switch ((int)$char) {
        case '"': {
          $special = '"';
          break;
        }
        case '\\': {
          $special = '\\';
          break;
        }
        case '/': {
          $special = '/';
          break;
        }
        case '\x08': {
          $special = 'b';
          break;
        }
        case '\f': {
          $special = 'f';
          break;
        }
        case '\n': {
          $special = 'n';
          break;
        }
        case '\r': {
          $special = 'r';
          break;
        }
        case '\t': {
          # Note: Decoded char from literal ASCII tab will be encoded with "\\t" (non-reversible).
          $special = 't';
          break;
        }
      }
      if ($special == -1) {
        $buffer->push_char($char);
      }
      else {
        $buffer->push_char('\\');
        $buffer->push_char($special);
      }
    }
    return $buffer->to_string;
  }

  private method _encode_recursive : string ($spvm_data : object, $depth : int) {
    
    my $json : string;
    
    # undef
    if ($spvm_data == undef) {
      $json = "null";
    }
    # Hash
    elsif ($spvm_data isa Hash) {
      my $buffer = StringBuffer->new;
      $buffer->push_char('{');
      my $hash = (Hash)$spvm_data;
      my $keys = $hash->keys;
      if ($self->canonical) {
        Fn->sort_string($keys, 0, scalar @$keys, method : int ($a : string, $b : string) {
          return $a cmp $b;
        });
      }
      for (my $keys_index = 0; $keys_index < @$keys; ++$keys_index) {
        if ($keys_index > 0) {
          $buffer->push_char(',');
        }
        $buffer->push_char('"');
        $buffer->push($keys->[$keys_index]);
        $buffer->push_char('"');
        $buffer->push_char(':');
        my $json_part = $self->_encode_recursive($hash->get($keys->[$keys_index]), $depth + 1);
        $buffer->push($json_part);
      }
      $buffer->push_char('}');
      
      $json = $buffer->to_string;
    }
    # Array
    elsif ($spvm_data isa List) {
      my $buffer = StringBuffer->new;
      $buffer->push_char('[');
      
      my $list = (List)$spvm_data;
      my $length = $list->length;
      for (my $list_index = 0; $list_index < $length; ++$list_index) {
        if ($list_index > 0) {
          $buffer->push_char(',');
        }
        my $json_part = $self->_encode_recursive($list->get($list_index), $depth + 1);
        $buffer->push($json_part);
      }
      $buffer->push_char(']');
      
      $json = $buffer->to_string;
    }
    # string
    elsif ($spvm_data isa string) {
      my $escaped = &_escape_string((string)$spvm_data);
      $json = "\"" . $escaped . "\"";
    }
    # byte
    elsif ($spvm_data isa Byte) {
      $json = (string)(double)(((Byte)$spvm_data)->value);
    }
    # short
    elsif ($spvm_data isa Short) {
      $json = (string)(double)(((Short)$spvm_data)->value);
    }
    # int
    elsif ($spvm_data isa Int) {
      $json = (string)(double)(((Int)$spvm_data)->value);
    }
    # long
    elsif ($spvm_data isa Long) {
      $json = (string)(double)(((Long)$spvm_data)->value);
    }
    # float
    elsif ($spvm_data isa Float) {
      $json = (string)(double)(((Float)$spvm_data)->value);
    }
    # double
    elsif ($spvm_data isa Double) {
      $json = (string)(((Double)$spvm_data)->value);
    }
    # bool
    elsif ($spvm_data isa Bool) {
      if (((Bool)$spvm_data)->value) {
        $json = "true";
      }
      else {
        $json = "false";
      }
    }
    else {
      die "Invalid data type";
    }
    
    return $json;
  }

  static method new : JSON () {
    my $json = new JSON;
    return $json;
  }

  method encode : string ($object : object) {
    return $self->_encode_recursive($object, 0);
  }

  method decode : object ($json : string) {
    my $iter = 0;
    my $spvm_data = $self->_decode_recursive($json, \$iter);

    # allow $json to have trailing spaces.
    $self->_skip_spaces($json, \$iter);

    # do not allow $json to have non-space string after a json object,
    # something like `{"key":1} [1,2]`
    my $length = length $json;
    unless ($iter == $length) {
      &_decode_error("garbage after JSON object", $json, $iter);
    }

    return $spvm_data;
  }
}
